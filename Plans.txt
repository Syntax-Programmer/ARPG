Current Performance and Future Assumptions:

    Currently achieving 60 FPS while rendering 10,004 textures and around 25 FPS with 40,000 textures in a single-threaded setup.
    With the planned dynamic texture loading and unloading system, FPS may drop to 30-40 single threaded, which is still highly playable.

    NOTE: The above stats are for extreme case. In practical game we would at max 50 txtrs which is also a stretch.

Future Scalability Plan:
1. Parallel Pathfinding for NPCs

    Offload NPC pathfinding to a dedicated thread, running computations at intervals (e.g., every 100 ms).
    Changes to NPC states will be synchronized back to the main thread without blocking the game loop.
    This ensures heavy computations don't degrade the rendering or input performance.

2. Dynamic Texture Loading and Unloading

    Delegate texture generation and management to a separate thread:
        Loading new textures: Triggered when the player loads new terrain or enters a new area.
        Unloading textures: Remove or recycle textures no longer needed.
    Once a texture is generated, transfer it to the main game thread for GPU upload. This reduces stalling in the render loop.

Expected Outcomes:

    With dynamic texture management, you can maintain smoother frame rates (e.g., 30-40 FPS) in high-load scenarios.
    Offloading these tasks to separate threads could potentially push performance beyond the current 60 FPS in normal conditions, as the main thread is relieved of non-critical workloads.

Benefits of This Approach:

    Better Frame Stability:
        By decoupling heavy computations, you avoid FPS spikes or frame-time inconsistencies.

    Scalability:
        As the game world expands with more NPCs and terrain complexity, the system can handle additional workload without significant drops in performance.

    Future-Proof Design:
        The architecture allows new systems (e.g., AI behaviors, complex physics) to be integrated without impacting the main game loop.